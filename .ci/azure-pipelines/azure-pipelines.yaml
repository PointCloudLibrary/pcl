# Exclude Rules:
# 1. path-filter in trigger and pr, 
#    this is NOT exclude rules for documentation,
#    set this rule only to avoid any CI run.
# 2. DOCS_LISTS in diff script, 
#    the lists contains all documentation-related files,
#    fill the list to help git-diff recognize docs changes.

trigger:
  paths:
    exclude:
    - README.md
    - CHANGES.md
    - CONTRIBUTING.md
    # add more exclude rules, e.g. .ci, .dev, .github
    # which won't cause any CI to run.

pr:
  paths:
    exclude:
    - README.md
    - CHANGES.md
    - CONTRIBUTING.md
    # add more exclude rules, e.g. .ci, .dev, .github
    # which won't cause any CI to run.

resources:
  containers:
    - container: fmt # for formatting.yaml
      image: pointcloudlibrary/fmt

stages:
  - stage: formatting
    displayName: Formatting
    jobs:
      - template: formatting.yaml

  - stage: diff
    displayName: Code Changes Diff
    jobs:
      - job: CodeDiff
        displayName: Code Diff
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - script: | 
              # Add all docs path to this array
              DOCS_LISTS=("doc" "*.md")
              for ENTRY in "${DOCS_LISTS[@]}"; do
                DIFF_EXCLUDE="':(exclude)${ENTRY}' ${DIFF_EXCLUDE}"
              done

              # Check the CI build reason: Pull Request or Git Push
              BUILD_REASON=$(Build.Reason)
              if [ "${BUILD_REASON}" -eq "PullRequest" ]; then
                MERGE_BASE_PAIR="HEAD origin/master"
              else
                MERGE_BASE_PAIR="HEAD HEAD~1"
              fi

              # Initiate HasCodeChanges variable
              echo "##vso[task.setvariable variable=HasCodeChanges;isOutput=true]false"

              # Show full git diff results
              cd $(Build.SourcesDirectory)
              git diff $(git merge-base ${MERGE_BASE_PAIR})

              # Set HasCodeChanges to true, if there's still file changed when excluding those docs
              git diff --quiet $(git merge-base ${MERGE_BASE_PAIR}) -- ${DIFF_EXCLUDE} || \
              echo "##vso[task.setvariable variable=HasCodeChanges;isOutput=true]true"
            name: GitResult
            displayName: Show Git Diff Result

  - stage: documentation
    displayName: Goto Documentation
    dependsOn: diff
    condition: and(succeeded(), eq(dependencies.diff.outputs['CodeDiff.GitResult.HasCodeChanges'], 'false'))
    jobs:
      - job: prompt
        displayName: Trigger Prompt
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: echo Trigger docs-pipeline.yaml...

  - stage: build
    displayName: Goto Build
    dependsOn: diff
    condition: and(succeeded(), eq(dependencies.diff.outputs['CodeDiff.GitResult.HasCodeChanges'], 'true'))
    jobs:
      - job: prompt
        displayName: Trigger Prompt
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: echo Trigger build-pipeline.yaml...
