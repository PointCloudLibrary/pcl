/*
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2013, Intelligent Robotics Lab, DLUT.
 *  Author: Qinghua Li, Yan Zhuang, Xuedong Wang
 *
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Intelligent Robotics Lab, DLUT. nor the names
 *     of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

#include <QtGui>
#include <QIcon>
#include <QPixmap>
#include <QKeySequence>
#include <opencv/highgui.h>

#include "../include/qt_gui.h"

// Constructs a QT GUI for easy control of Place Recognition
Graphical_UI::Graphical_UI ()
  : query_glviewer (NULL), lib_glviewer (NULL)
{
  infoText = new QString (tr (
             "<p><b>3D-SMART - Place Recognition</b> provides a novel 3D-laser-based indoor place "
             "recognition method to deal with the random disturbances caused by unexpected movements "
             "of people and other objects. "
             "The proposed approach can extract and match the Speeded-Up Robust Features (SURFs) "
             "from bearing-angle images generated by a 3D laser scanner. It can cope with the "
             "irregular disturbance of moving objects and the problem of observing-location changes "
             "of the laser scanner. Both global metric information and local SURF features are "
             "extracted from 3D laser point clouds and 2D bearing-angle images, respectively.</p>"
             "<p>For more detailed information, please refer to our recent published paper (IEEE "
             "Transactions on Instrument and Measurement, Vol. 62, No. 2, 2013), you can get it "
             "through <a href=\"http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6305475\">"
             "http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6305475</a>.</p>"));
  licenseText = new QString (tr (
                "<p><b>3D-SMART - Place Recognition</b> is an open source software under the terms of "
                "the 3-clause BSD license. See the Software License Agreement (BSD License) for more details.</p>"
                "<p>If you have any questions, suggestions or corrections regarding usage of "
                "3D-SMART - Place Recognition, please contact <b>Yan Zhuang</b> (zhuang@dlut.edu.cn).</p>"));
  helpText = new QString (tr (
             "<p><b>Two Steps:</b>"
             "<ul><li><b>1.</b> Please load 3D laser scanning data of query scene (Graph -> Load Data (Ctrl+L));</li>"
             "    <li><b>2.</b> Place recognition for query scene (Recognition -> Place Recognition (Ctrl+P)).</li><ul></p>"
             "<p><b>Optionally, 3D Viewer Mouse and Keyboard Commands:</b>"
             "<ul><li><i>Left/Right button:</i> rotation.</li>"
             "    <li><i>Middle button:</i> translation.</li>"
             "    <li><i>Wheel:</i> zoom.</li>"
             "    <li><i>R:</i> reset the initial view of scene.</li>"
             "    <li><i>Q, E, W, S, A, D:</i> translation in all directions.</li><ul></p>"));

  // Create widgets for image display
  query_BAimage_label = new QLabel ("<i>Waiting for bearing-angle image...</i>");
  query_BAimage_label->setFrameStyle (QFrame::StyledPanel | QFrame::Sunken);
  query_BAimage_label->setAlignment (Qt::AlignCenter);
  query_BAimage_label->setScaledContents (true);

  features_image_label = new QLabel (tr ("<i>Waiting for features image...</i>"));
  features_image_label->setFrameStyle (QFrame::StyledPanel | QFrame::Sunken);
  features_image_label->setAlignment (Qt::AlignCenter);
  features_image_label->setScaledContents (true);

  lib_BAimage_label = new QLabel (tr ("<i>Waiting for bearing-angle image...</i>"));
  lib_BAimage_label->setFrameStyle (QFrame::StyledPanel | QFrame::Sunken);
  lib_BAimage_label->setAlignment (Qt::AlignCenter);
  lib_BAimage_label->setScaledContents (true);

  query_glviewer = new GLViewer (GraphManager::query_cloud, 1, this); /* Displays 3D point cloud */
  lib_glviewer = new GLViewer (GraphManager::lib_cloud, 2, this);     /* Displays 3D point cloud */

  // Setup the layout:
  /* Use a splitter as main widget */
  vsplitter = new QSplitter (Qt::Vertical);
  setCentralWidget (vsplitter);

  /* Arrange glviewer splitters in horizontal layout */
  QSplitter* hsplitter1 = new QSplitter (Qt::Horizontal);
  hsplitter1->addWidget (query_glviewer);
  hsplitter1->addWidget (lib_glviewer);
  /* Add them as top item to splitter */
  vsplitter->addWidget (hsplitter1);

  /* Arrange image labels in horizontal layout */
  QSplitter* hsplitter2 = new QSplitter (Qt::Horizontal);
  hsplitter2->addWidget (query_BAimage_label);
  hsplitter2->addWidget (features_image_label);
  hsplitter2->addWidget (lib_BAimage_label);
  /* Add them as bottom item to splitter */
  vsplitter->addWidget (hsplitter2);

  createMenus ();

  statusLabel = new QLabel ();
  statusBar ()->insertWidget (0, statusLabel, 0);
  QString message = tr ("Ready for Place Recognition");
  statusBar ()->showMessage (message);

  infoLabel = new QLabel (tr ("Waiting for motion information..."));
  infoLabel->setFrameStyle (QFrame::StyledPanel | QFrame::Sunken);
  infoLabel->setAlignment (Qt::AlignRight);
  statusBar ()->addPermanentWidget (infoLabel, 0);

  infoLabel2 = new QLabel (tr ("<i>See Help->Usage Help to Start</i>"));
  infoLabel2->setFrameStyle (QFrame::StyledPanel | QFrame::Sunken);
  infoLabel2->setAlignment (Qt::AlignRight);
  statusBar ()->addPermanentWidget (infoLabel2, 0);

  setWindowTitle (tr ("3D SMART - Place Recognition"));
  setMinimumSize (790, 590);
  resize (1000, 700);
}

Graphical_UI::~Graphical_UI ()
{
}


void
Graphical_UI::setLibBAImage (QImage qimage)
{
  if (lib_BAimage_label->isVisible ())
  {
    lib_BAimage_label->setPixmap (QPixmap::fromImage (qimage));
    lib_BAimage_label->repaint ();
  }
}

void
Graphical_UI::setQueryBAImage (QImage qimage)
{
  if (query_BAimage_label->isVisible ())
  {
    query_BAimage_label->setPixmap (QPixmap::fromImage (qimage));
    query_BAimage_label->repaint ();
  }
}

void
Graphical_UI::setFeaturesImage (QImage qimage)
{
  if (features_image_label->isVisible ())
  {
    features_image_label->setPixmap (QPixmap::fromImage (qimage));
    features_image_label->repaint ();
  }
}

void
Graphical_UI::setStatus (QString message)
{
  statusBar ()->showMessage (message);
}

void
Graphical_UI::loadDataCmd ()
{
  QString message = tr ("Please select 3D laser scanning data file what you want to load");
  statusBar ()->showMessage (message);
  Q_EMIT loadData();
}

void
Graphical_UI::reset ()
{
  GraphManager::query_cloud.clear ();
  GraphManager::lib_cloud.clear ();
  query_glviewer->reset ();
  lib_glviewer->reset ();
  query_BAimage_label->setText ("<i>Waiting for bearing-angle image...</i>");
  features_image_label->setText ("<i>Waiting for features image...</i>");
  lib_BAimage_label->setText ("<i>Waiting for bearing-angle image...</i>");
  QString message = tr ("Graph Reset, A fresh new graph is waiting...");
  statusBar ()->showMessage (message);
}

void
Graphical_UI::showBAImageCmd ()
{
  Q_EMIT showBAImage();
  QString message = tr ("Show Bearing-Angle image of Query scene");
  statusBar ()->showMessage (message);
}

void
Graphical_UI::showFlowsheet ()
{
  IplImage* image = cvLoadImage ("../flowsheet.jpg", -1);
  cvNamedWindow ("Flowsheet", 0);
  cvShowImage ("Flowsheet", image);

  cvWaitKey (0);

  cvDestroyWindow ("Flowsheet");
  cvReleaseImage (&image);
}

void
Graphical_UI::extractFeaturesCmd ()
{
  QString message = tr ("Extract global spatial features and local SURF features, then save to database");
  statusBar ()->showMessage (message);
  Q_EMIT extractFeatures();
}

void
Graphical_UI::placeRecognitionCmd ()
{
  QString message = tr ("Place recognition for Query scene");
  statusBar ()->showMessage (message);
  Q_EMIT placeRecognition();
}

void
Graphical_UI::set2DImage (bool is_on)
{
  if (is_on)
  {
    query_BAimage_label->show ();
    lib_BAimage_label->show ();
    features_image_label->show ();
    QList < int >list;
    list.append (1);      /* Upper part on */
    list.append (1);      /* Lower part off */
    vsplitter->setSizes (list);
  }
  else
  {
    query_BAimage_label->hide ();
    lib_BAimage_label->hide ();
    features_image_label->hide ();
    QList < int >list;
    list.append (1);      /* Upper part on */
    list.append (0);      /* Lower part off */
    vsplitter->setSizes (list);
  }
}

void
Graphical_UI::help ()
{
  QMessageBox::about (this, tr ("Help"), *helpText);
}

void
Graphical_UI::about ()
{
  QMessageBox::about (this, tr ("About 3D-SMART - Place Recognition"), *infoText + *licenseText);
}

void
Graphical_UI::createMenus ()
{
  // Menus are created here
  QMenu *graphMenu;
  QMenu *recognitionMenu;
  QMenu *viewMenu;
  QMenu *helpMenu;

  //############################## Graph Menu ###############################

  graphMenu = menuBar ()->addMenu (tr ("&Graph"));

  QAction *loadAct = new QAction (tr ("&Load Data"), this);
  loadAct->setShortcut (QString ("Ctrl+L"));
  loadAct->setStatusTip (tr ("Load data"));
  loadAct->setIcon (QIcon::fromTheme ("load")); //doesn't work for gnome
  connect (loadAct, SIGNAL (triggered ()), this, SLOT (loadDataCmd ()));
  graphMenu->addAction (loadAct);
  this->addAction (loadAct);

  QAction *resetAct = new QAction (tr ("&Reset"), this);
  resetAct->setShortcut (QString ("Ctrl+R"));
  resetAct->setStatusTip (tr ("Reset the graph, clear all data collected"));
  resetAct->setIcon (QIcon::fromTheme ("edit-delete")); //doesn't work (for gnome
  connect (resetAct, SIGNAL (triggered ()), this, SLOT (reset ()));
  graphMenu->addAction (resetAct);
  this->addAction (resetAct);

  graphMenu->addSeparator ();

  QAction *showBAImageAct = new QAction (tr ("Show &BA Image"), this);
  showBAImageAct->setShortcut (QString ("Ctrl+B"));
  showBAImageAct->setStatusTip (tr ("Show Bearing-Angle image"));
  showBAImageAct->setIcon (QIcon::fromTheme ("BA-show")); //doesn't work for gnome
  connect (showBAImageAct, SIGNAL (triggered ()), this, SLOT (showBAImageCmd ()));
  graphMenu->addAction (showBAImageAct);
  this->addAction (showBAImageAct);

  QAction *showFlowsheetAct = new QAction (tr ("Show &Flowsheet"), this);
  showFlowsheetAct->setShortcut (QString ("Ctrl+F"));
  showFlowsheetAct->setStatusTip (tr ("Show flowsheet"));
  showFlowsheetAct->setIcon (QIcon::fromTheme ("flowsheet-show")); //doesn't work for gnome
  connect (showFlowsheetAct, SIGNAL (triggered ()), this, SLOT (showFlowsheet ()));
  graphMenu->addAction (showFlowsheetAct);
  this->addAction (showFlowsheetAct);

  graphMenu->addSeparator ();

  QAction *exitAct = new QAction (tr ("&Exit"), this);
  exitAct->setShortcuts (QKeySequence::Quit);
  exitAct->setStatusTip (tr ("Exit the application"));
  exitAct->setIcon (QIcon::fromTheme ("application-exit")); //doesn't work for gnome
  connect (exitAct, SIGNAL (triggered ()), this, SLOT (close ()));
  graphMenu->addAction (exitAct);
  this->addAction (exitAct);


  //########################### Recognition Menu ############################

  recognitionMenu = menuBar ()->addMenu (tr ("&Recognition"));

  QAction *extractAct = new QAction (tr ("&Extract Features"), this);
  extractAct->setShortcut (QString ("Ctrl+E"));
  extractAct->setStatusTip (tr ("Extract global spatial and SURF features, then save to file"));
  extractAct->setIcon (QIcon::fromTheme ("extract-save")); //doesn't work (for gnome
  connect (extractAct, SIGNAL (triggered ()), this, SLOT (extractFeaturesCmd ()));
  recognitionMenu->addAction (extractAct);
  this->addAction (extractAct);

  recognitionMenu->addSeparator ();

  QAction *recognitionAct = new QAction (tr ("&Place Recognition"), this);
  recognitionAct->setShortcut (QString ("Ctrl+P"));
  recognitionAct->setStatusTip (tr ("Place recognition"));
  recognitionAct->setIcon (QIcon::fromTheme ("place-recognition")); //doesn't work for gnome
  connect (recognitionAct, SIGNAL (triggered ()), this, SLOT (placeRecognitionCmd ()));
  recognitionMenu->addAction (recognitionAct);
  this->addAction (recognitionAct);


  //############################## View Menu ################################

  viewMenu = menuBar ()->addMenu (tr ("&View"));

  QAction *toggleGLViewerAct = new QAction (tr ("Toggle &3D Display"), this);
  toggleGLViewerAct->setShortcut (QString ("3"));
  toggleGLViewerAct->setCheckable (true);
  toggleGLViewerAct->setChecked (true);
  toggleGLViewerAct->setStatusTip (tr ("Turn on/off the OpenGL Display"));
  connect (toggleGLViewerAct, SIGNAL (toggled (bool)), lib_glviewer, SLOT (setVisible (bool)));
  connect (toggleGLViewerAct, SIGNAL (toggled (bool)), query_glviewer, SLOT (setVisible (bool)));
  viewMenu->addAction (toggleGLViewerAct);
  this->addAction (toggleGLViewerAct);

  viewMenu->addSeparator ();

  QAction *toggleQLabelAct = new QAction (tr ("Toggle &2D Display"), this);
  toggleQLabelAct->setShortcut (QString ("2"));
  toggleQLabelAct->setCheckable (true);
  toggleQLabelAct->setChecked (true);
  toggleQLabelAct->setStatusTip (tr ("Turn on/off the Image Display"));
  connect (toggleQLabelAct, SIGNAL (toggled (bool)), this, SLOT (set2DImage (bool)));
  viewMenu->addAction (toggleQLabelAct);
  this->addAction (toggleQLabelAct);


  //############################### Help Menu ###############################

  helpMenu = menuBar ()->addMenu (tr ("&Help"));

  QAction *helpAct = new QAction (tr ("&Usage Help"), this);
  helpAct->setShortcuts (QKeySequence::HelpContents);
  helpAct->setStatusTip (tr ("Show usage information"));
  helpAct->setIcon (QIcon::fromTheme ("help-contents")); //doesn't work for gnome
  connect (helpAct, SIGNAL (triggered ()), this, SLOT (help ()));
  helpMenu->addAction (helpAct);
  this->addAction (helpAct);

  helpMenu->addSeparator ();

  QAction *aboutAct = new QAction (tr ("&About Place Recognition"), this);
  aboutAct->setShortcut (QString ("Ctrl+A"));
  aboutAct->setStatusTip (tr ("Show information about place recognition"));
  aboutAct->setIcon (QIcon::fromTheme ("help-about")); //doesn't work for gnome
  connect (aboutAct, SIGNAL (triggered ()), this, SLOT (about ()));
  helpMenu->addAction (aboutAct);
  this->addAction (aboutAct);
}