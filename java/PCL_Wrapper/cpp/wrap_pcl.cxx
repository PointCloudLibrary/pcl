/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


#include <pcl/point_types.h>


#include <pcl/point_types.h>


#include <pcl/point_types.h>
#include <pcl/point_cloud.h>


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1


#include "pcl/pcl_base.h"

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <pcl/features/feature.h> 


#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/features/normal_3d.h>


#include <pcl/point_types.h>
#include <pcl/point_cloud.h>


#include <pcl/search/search.h>


#include <pcl/search/kdtree.h>
#include <pcl/point_cloud.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_imaxdiv_1t_1quot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->quot = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_imaxdiv_1t_1quot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  result = (long long) ((arg1)->quot);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_imaxdiv_1t_1rem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->rem = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_imaxdiv_1t_1rem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1; 
  result = (long long) ((arg1)->rem);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1imaxdiv_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imaxdiv_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (imaxdiv_t *)new imaxdiv_t();
  *(imaxdiv_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1imaxdiv_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imaxdiv_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_imaxabs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  intmax_t arg1 ;
  intmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (intmax_t)jarg1; 
  result = (intmax_t)imaxabs(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_imaxdiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  intmax_t arg1 ;
  intmax_t arg2 ;
  imaxdiv_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (intmax_t)jarg1; 
  arg2 = (intmax_t)jarg2; 
  result = imaxdiv(arg1,arg2);
  *(imaxdiv_t **)&jresult = new imaxdiv_t((const imaxdiv_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_strtoimax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  intmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (intmax_t)strtoimax((char const *)arg1,arg2,arg3);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_wrapper_pcl_1moduleJNI_strtoumax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jobject jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  uintmax_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (uintmax_t)strtoumax((char const *)arg1,arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointXYZ_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pcl::PointXYZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pcl::PointXYZ *)new pcl::PointXYZ();
  *(pcl::PointXYZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointXYZ_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  pcl::PointXYZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (pcl::PointXYZ *)new pcl::PointXYZ(arg1,arg2,arg3);
  *(pcl::PointXYZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointXYZ_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pcl::PointXYZ *arg1 = (pcl::PointXYZ *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PointXYZ **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointXYZ_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pcl::PointXYZ *arg1 = (pcl::PointXYZ *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PointXYZ **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointXYZ_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pcl::PointXYZ *arg1 = (pcl::PointXYZ *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PointXYZ **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointXYZ_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pcl::PointXYZ *arg1 = (pcl::PointXYZ *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PointXYZ **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointXYZ_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pcl::PointXYZ *arg1 = (pcl::PointXYZ *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PointXYZ **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointXYZ_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pcl::PointXYZ *arg1 = (pcl::PointXYZ *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PointXYZ **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointXYZ_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointXYZ *arg1 = (pcl::PointXYZ *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PointXYZ **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->data;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointXYZ_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointXYZ *arg1 = (pcl::PointXYZ *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PointXYZ **)&jarg1; 
  result = (float *)(float *) ((arg1)->data);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1pcl_1PointXYZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pcl::PointXYZ *arg1 = (pcl::PointXYZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pcl::PointXYZ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1Normal_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pcl::Normal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pcl::Normal *)new pcl::Normal();
  *(pcl::Normal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1Normal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  pcl::Normal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (pcl::Normal *)new pcl::Normal(arg1,arg2,arg3);
  *(pcl::Normal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1normal_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->normal_x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1normal_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  result = (float) ((arg1)->normal_x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1normal_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->normal_y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1normal_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  result = (float) ((arg1)->normal_y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1normal_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->normal_z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1normal_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  result = (float) ((arg1)->normal_z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1curvature_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->curvature = arg2;
}


SWIGEXPORT jfloat JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1curvature_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  result = (float) ((arg1)->curvature);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1data_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->data_n;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Normal_1data_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Normal **)&jarg1; 
  result = (float *)(float *) ((arg1)->data_n);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1pcl_1Normal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pcl::Normal *arg1 = (pcl::Normal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pcl::Normal **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1PointXYZ_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pcl::PointCloud< pcl::PointXYZ > *)new pcl::PointCloud< pcl::PointXYZ >();
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1PointXYZ_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (pcl::PointCloud< pcl::PointXYZ > *)((*(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1) ? (*(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::PointXYZ > & reference is null");
    return 0;
  } 
  result = (pcl::PointCloud< pcl::PointXYZ > *)new pcl::PointCloud< pcl::PointXYZ >(*arg1);
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1PointXYZ_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = 0 ;
  std::vector< int > *arg2 = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  arg1 = (pcl::PointCloud< pcl::PointXYZ > *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::PointXYZ > const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  result = (pcl::PointCloud< pcl::PointXYZ > *)new pcl::PointCloud< pcl::PointXYZ >((pcl::PointCloud< pcl::PointXYZ > const &)*arg1,(std::vector< int > const &)*arg2);
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1PointXYZ_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  pcl::PointXYZ *arg3 = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = *(pcl::PointXYZ **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return 0;
  } 
  result = (pcl::PointCloud< pcl::PointXYZ > *)new pcl::PointCloud< pcl::PointXYZ >(arg1,arg2,(pcl::PointXYZ const &)*arg3);
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1PointXYZ_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  pcl::PointCloud< pcl::PointXYZ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (pcl::PointCloud< pcl::PointXYZ > *)new pcl::PointCloud< pcl::PointXYZ >(arg1,arg2);
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1pcl_1PointCloud_1PointXYZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1Add_1To_1Self(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg2 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::PointCloud< pcl::PointXYZ > *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::PointXYZ > const & reference is null");
    return 0;
  } 
  result = (pcl::PointCloud< pcl::PointXYZ > *) &(arg1)->operator +=((pcl::PointCloud< pcl::PointXYZ > const &)*arg2);
  *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jresult = new boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1Add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg2 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::PointXYZ > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::PointCloud< pcl::PointXYZ > *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::PointXYZ > const & reference is null");
    return 0;
  } 
  result = (arg1)->operator +((pcl::PointCloud< pcl::PointXYZ > const &)*arg2);
  *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jresult = new boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> >(new pcl::PointCloud< pcl::PointXYZ >((pcl::PointCloud< pcl::PointXYZ > &)result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::PointXYZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (pcl::PointXYZ *) &((pcl::PointCloud< pcl::PointXYZ > const *)arg1)->at(arg2,arg3);
  *(pcl::PointXYZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1at_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::PointXYZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (pcl::PointXYZ *) &((pcl::PointCloud< pcl::PointXYZ > const *)arg1)->operator ()(arg2,arg3);
  *(pcl::PointXYZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1isOrganized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((pcl::PointCloud< pcl::PointXYZ > const *)arg1)->isOrganized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->begin();
  *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jresult = new pcl::PointCloud< pcl::PointXYZ >::iterator((const pcl::PointCloud< pcl::PointXYZ >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->end();
  *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jresult = new pcl::PointCloud< pcl::PointXYZ >::iterator((const pcl::PointCloud< pcl::PointXYZ >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > const > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (size_t)((pcl::PointCloud< pcl::PointXYZ > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  size_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((pcl::PointCloud< pcl::PointXYZ > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  size_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1at_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  size_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::PointXYZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (pcl::PointXYZ *) &((pcl::PointCloud< pcl::PointXYZ > const *)arg1)->operator [](arg2);
  *(pcl::PointXYZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::PointXYZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (pcl::PointXYZ *) &((pcl::PointCloud< pcl::PointXYZ > const *)arg1)->front();
  *(pcl::PointXYZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::PointXYZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (pcl::PointXYZ *) &((pcl::PointCloud< pcl::PointXYZ > const *)arg1)->back();
  *(pcl::PointXYZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  pcl::PointXYZ *arg2 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(pcl::PointXYZ **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return ;
  } 
  (arg1)->push_back((pcl::PointXYZ const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > arg2 ;
  pcl::PointXYZ *arg3 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::PointXYZ >::iterator *argp2 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::PointXYZ >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(pcl::PointXYZ **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return 0;
  } 
  result = (arg1)->insert(arg2,(pcl::PointXYZ const &)*arg3);
  *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jresult = new pcl::PointCloud< pcl::PointXYZ >::iterator((const pcl::PointCloud< pcl::PointXYZ >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > arg2 ;
  size_t arg3 ;
  pcl::PointXYZ *arg4 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::PointXYZ >::iterator *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::PointXYZ >::iterator");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(pcl::PointXYZ **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,arg3,(pcl::PointXYZ const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::PointXYZ >::iterator *argp2 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::PointXYZ >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jresult = new pcl::PointCloud< pcl::PointXYZ >::iterator((const pcl::PointCloud< pcl::PointXYZ >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > arg2 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > arg3 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::PointXYZ >::iterator *argp2 ;
  pcl::PointCloud< pcl::PointXYZ >::iterator *argp3 ;
  SwigValueWrapper< pcl::PointCloud< pcl::PointXYZ >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::PointXYZ >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::PointXYZ >::iterator");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->erase(arg2,arg3);
  *(pcl::PointCloud< pcl::PointXYZ >::iterator **)&jresult = new pcl::PointCloud< pcl::PointXYZ >::iterator((const pcl::PointCloud< pcl::PointXYZ >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg2 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::PointCloud< pcl::PointXYZ > *)((*(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::PointXYZ > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1makeShared(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::PointXYZ >::Ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((pcl::PointCloud< pcl::PointXYZ > const *)arg1)->makeShared();
  *(pcl::PointCloud< pcl::PointXYZ >::Ptr **)&jresult = result ? new pcl::PointCloud< pcl::PointXYZ >::Ptr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1header_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  pcl::PCLHeader arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::PCLHeader *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PCLHeader **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PCLHeader");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->header = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1header_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::PCLHeader result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->header);
  *(pcl::PCLHeader **)&jresult = new pcl::PCLHeader((const pcl::PCLHeader &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1points_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  std::vector< pcl::PointXYZ,Eigen::aligned_allocator< pcl::PointXYZ > > *arg2 = (std::vector< pcl::PointXYZ,Eigen::aligned_allocator< pcl::PointXYZ > > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< pcl::PointXYZ,Eigen::aligned_allocator< pcl::PointXYZ > > **)&jarg2; 
  if (arg1) (arg1)->points = *arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1points_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  std::vector< pcl::PointXYZ,Eigen::aligned_allocator< pcl::PointXYZ > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< pcl::PointXYZ,Eigen::aligned_allocator< pcl::PointXYZ > > *)& ((arg1)->points);
  *(std::vector< pcl::PointXYZ,Eigen::aligned_allocator< pcl::PointXYZ > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint32_t) ((arg1)->width);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint32_t) ((arg1)->height);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1is_1dense_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  bool arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_dense = arg2;
}


SWIGEXPORT jboolean JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1is_1dense_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool) ((arg1)->is_dense);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1sensor_1origin_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  Eigen::Vector4f arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  Eigen::Vector4f *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(Eigen::Vector4f **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Eigen::Vector4f");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->sensor_origin_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1sensor_1origin_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  Eigen::Vector4f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->sensor_origin_);
  *(Eigen::Vector4f **)&jresult = new Eigen::Vector4f((const Eigen::Vector4f &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1sensor_1orientation_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  Eigen::Quaternionf arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  Eigen::Quaternionf *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(Eigen::Quaternionf **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Eigen::Quaternionf");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->sensor_orientation_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1PointXYZ_1sensor_1orientation_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg1 = (pcl::PointCloud< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::PointXYZ > > *smartarg1 = 0 ;
  Eigen::Quaternionf result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->sensor_orientation_);
  *(Eigen::Quaternionf **)&jresult = new Eigen::Quaternionf((const Eigen::Quaternionf &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1Normal_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pcl::PointCloud< pcl::Normal > *)new pcl::PointCloud< pcl::Normal >();
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::Normal> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1Normal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = 0 ;
  pcl::PointCloud< pcl::Normal > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (pcl::PointCloud< pcl::Normal > *)((*(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1) ? (*(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::Normal > & reference is null");
    return 0;
  } 
  result = (pcl::PointCloud< pcl::Normal > *)new pcl::PointCloud< pcl::Normal >(*arg1);
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::Normal> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1Normal_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = 0 ;
  std::vector< int > *arg2 = 0 ;
  pcl::PointCloud< pcl::Normal > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  arg1 = (pcl::PointCloud< pcl::Normal > *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::Normal > const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  result = (pcl::PointCloud< pcl::Normal > *)new pcl::PointCloud< pcl::Normal >((pcl::PointCloud< pcl::Normal > const &)*arg1,(std::vector< int > const &)*arg2);
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::Normal> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1Normal_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  pcl::Normal *arg3 = 0 ;
  pcl::PointCloud< pcl::Normal > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = *(pcl::Normal **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::Normal const & reference is null");
    return 0;
  } 
  result = (pcl::PointCloud< pcl::Normal > *)new pcl::PointCloud< pcl::Normal >(arg1,arg2,(pcl::Normal const &)*arg3);
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::Normal> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PointCloud_1Normal_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  pcl::PointCloud< pcl::Normal > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (pcl::PointCloud< pcl::Normal > *)new pcl::PointCloud< pcl::Normal >(arg1,arg2);
  
  *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jresult = result ? new boost::shared_ptr<  pcl::PointCloud<pcl::Normal> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1pcl_1PointCloud_1Normal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1Add_1To_1Self(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  pcl::PointCloud< pcl::Normal > *arg2 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::Normal > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::PointCloud< pcl::Normal > *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::Normal > const & reference is null");
    return 0;
  } 
  result = (pcl::PointCloud< pcl::Normal > *) &(arg1)->operator +=((pcl::PointCloud< pcl::Normal > const &)*arg2);
  *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jresult = new boost::shared_ptr<  pcl::PointCloud<pcl::Normal> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1Add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  pcl::PointCloud< pcl::Normal > *arg2 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::Normal > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::PointCloud< pcl::Normal > *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::Normal > const & reference is null");
    return 0;
  } 
  result = (arg1)->operator +((pcl::PointCloud< pcl::Normal > const &)*arg2);
  *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jresult = new boost::shared_ptr< const pcl::PointCloud<pcl::Normal> >(new pcl::PointCloud< pcl::Normal >((pcl::PointCloud< pcl::Normal > &)result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  int arg2 ;
  int arg3 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > const > *smartarg1 = 0 ;
  pcl::Normal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (pcl::Normal *) &((pcl::PointCloud< pcl::Normal > const *)arg1)->at(arg2,arg3);
  *(pcl::Normal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1at_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > const > *smartarg1 = 0 ;
  pcl::Normal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (pcl::Normal *) &((pcl::PointCloud< pcl::Normal > const *)arg1)->operator ()(arg2,arg3);
  *(pcl::Normal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1isOrganized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((pcl::PointCloud< pcl::Normal > const *)arg1)->isOrganized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->begin();
  *(pcl::PointCloud< pcl::Normal >::iterator **)&jresult = new pcl::PointCloud< pcl::Normal >::iterator((const pcl::PointCloud< pcl::Normal >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->end();
  *(pcl::PointCloud< pcl::Normal >::iterator **)&jresult = new pcl::PointCloud< pcl::Normal >::iterator((const pcl::PointCloud< pcl::Normal >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > const > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (size_t)((pcl::PointCloud< pcl::Normal > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  size_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((pcl::PointCloud< pcl::Normal > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  size_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1at_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  size_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > const > *smartarg1 = 0 ;
  pcl::Normal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (pcl::Normal *) &((pcl::PointCloud< pcl::Normal > const *)arg1)->operator [](arg2);
  *(pcl::Normal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > const > *smartarg1 = 0 ;
  pcl::Normal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (pcl::Normal *) &((pcl::PointCloud< pcl::Normal > const *)arg1)->front();
  *(pcl::Normal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > const > *smartarg1 = 0 ;
  pcl::Normal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (pcl::Normal *) &((pcl::PointCloud< pcl::Normal > const *)arg1)->back();
  *(pcl::Normal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  pcl::Normal *arg2 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(pcl::Normal **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::Normal const & reference is null");
    return ;
  } 
  (arg1)->push_back((pcl::Normal const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > arg2 ;
  pcl::Normal *arg3 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::Normal >::iterator *argp2 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PointCloud< pcl::Normal >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::Normal >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(pcl::Normal **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::Normal const & reference is null");
    return 0;
  } 
  result = (arg1)->insert(arg2,(pcl::Normal const &)*arg3);
  *(pcl::PointCloud< pcl::Normal >::iterator **)&jresult = new pcl::PointCloud< pcl::Normal >::iterator((const pcl::PointCloud< pcl::Normal >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > arg2 ;
  size_t arg3 ;
  pcl::Normal *arg4 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::Normal >::iterator *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PointCloud< pcl::Normal >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::Normal >::iterator");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(pcl::Normal **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::Normal const & reference is null");
    return ;
  } 
  (arg1)->insert(arg2,arg3,(pcl::Normal const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::Normal >::iterator *argp2 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PointCloud< pcl::Normal >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::Normal >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  *(pcl::PointCloud< pcl::Normal >::iterator **)&jresult = new pcl::PointCloud< pcl::Normal >::iterator((const pcl::PointCloud< pcl::Normal >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > arg2 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > arg3 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::Normal >::iterator *argp2 ;
  pcl::PointCloud< pcl::Normal >::iterator *argp3 ;
  SwigValueWrapper< pcl::PointCloud< pcl::Normal >::VectorType::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PointCloud< pcl::Normal >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::Normal >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(pcl::PointCloud< pcl::Normal >::iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PointCloud< pcl::Normal >::iterator");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->erase(arg2,arg3);
  *(pcl::PointCloud< pcl::Normal >::iterator **)&jresult = new pcl::PointCloud< pcl::Normal >::iterator((const pcl::PointCloud< pcl::Normal >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  pcl::PointCloud< pcl::Normal > *arg2 = 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::PointCloud< pcl::Normal > *)((*(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg2) ? (*(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::Normal > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1makeShared(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > const > *smartarg1 = 0 ;
  pcl::PointCloud< pcl::Normal >::Ptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((pcl::PointCloud< pcl::Normal > const *)arg1)->makeShared();
  *(pcl::PointCloud< pcl::Normal >::Ptr **)&jresult = result ? new pcl::PointCloud< pcl::Normal >::Ptr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1header_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  pcl::PCLHeader arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  pcl::PCLHeader *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(pcl::PCLHeader **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pcl::PCLHeader");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->header = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1header_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  pcl::PCLHeader result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->header);
  *(pcl::PCLHeader **)&jresult = new pcl::PCLHeader((const pcl::PCLHeader &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1points_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  std::vector< pcl::Normal,Eigen::aligned_allocator< pcl::Normal > > *arg2 = (std::vector< pcl::Normal,Eigen::aligned_allocator< pcl::Normal > > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< pcl::Normal,Eigen::aligned_allocator< pcl::Normal > > **)&jarg2; 
  if (arg1) (arg1)->points = *arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1points_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  std::vector< pcl::Normal,Eigen::aligned_allocator< pcl::Normal > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< pcl::Normal,Eigen::aligned_allocator< pcl::Normal > > *)& ((arg1)->points);
  *(std::vector< pcl::Normal,Eigen::aligned_allocator< pcl::Normal > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint32_t) ((arg1)->width);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint32_t) ((arg1)->height);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1is_1dense_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  bool arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_dense = arg2;
}


SWIGEXPORT jboolean JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1is_1dense_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool) ((arg1)->is_dense);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1sensor_1origin_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  Eigen::Vector4f arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  Eigen::Vector4f *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(Eigen::Vector4f **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Eigen::Vector4f");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->sensor_origin_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1sensor_1origin_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  Eigen::Vector4f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->sensor_origin_);
  *(Eigen::Vector4f **)&jresult = new Eigen::Vector4f((const Eigen::Vector4f &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1sensor_1orientation_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  Eigen::Quaternionf arg2 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  Eigen::Quaternionf *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(Eigen::Quaternionf **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Eigen::Quaternionf");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->sensor_orientation_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PointCloud_1Normal_1sensor_1orientation_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PointCloud< pcl::Normal > *arg1 = (pcl::PointCloud< pcl::Normal > *) 0 ;
  boost::shared_ptr< pcl::PointCloud< pcl::Normal > > *smartarg1 = 0 ;
  Eigen::Quaternionf result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg1;
  arg1 = (pcl::PointCloud<pcl::Normal> *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->sensor_orientation_);
  *(Eigen::Quaternionf **)&jresult = new Eigen::Quaternionf((const Eigen::Quaternionf &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PCLBase_1PointXYZ_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pcl::PCLBase< pcl::PointXYZ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pcl::PCLBase< pcl::PointXYZ > *)new pcl::PCLBase< pcl::PointXYZ >();
  *(pcl::PCLBase< pcl::PointXYZ > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1PCLBase_1PointXYZ_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PCLBase< pcl::PointXYZ > *arg1 = 0 ;
  pcl::PCLBase< pcl::PointXYZ > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PCLBase< pcl::PointXYZ > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PCLBase< pcl::PointXYZ > const & reference is null");
    return 0;
  } 
  result = (pcl::PCLBase< pcl::PointXYZ > *)new pcl::PCLBase< pcl::PointXYZ >((pcl::PCLBase< pcl::PointXYZ > const &)*arg1);
  *(pcl::PCLBase< pcl::PointXYZ > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1pcl_1PCLBase_1PointXYZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pcl::PCLBase< pcl::PointXYZ > *arg1 = (pcl::PCLBase< pcl::PointXYZ > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pcl::PCLBase< pcl::PointXYZ > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PCLBase_1PointXYZ_1setInputCloud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PCLBase< pcl::PointXYZ > *arg1 = (pcl::PCLBase< pcl::PointXYZ > *) 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr *arg2 = 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PCLBase< pcl::PointXYZ > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr **)&jarg2 : &tempnull2; 
  (arg1)->setInputCloud((pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PCLBase_1PointXYZ_1getInputCloud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PCLBase< pcl::PointXYZ > *arg1 = (pcl::PCLBase< pcl::PointXYZ > *) 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PCLBase< pcl::PointXYZ > **)&jarg1; 
  result = (arg1)->getInputCloud();
  *(pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr **)&jresult = result ? new pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PCLBase_1PointXYZ_1setIndices_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pcl::PCLBase< pcl::PointXYZ > *arg1 = (pcl::PCLBase< pcl::PointXYZ > *) 0 ;
  pcl::IndicesPtr *arg2 = 0 ;
  pcl::IndicesPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pcl::PCLBase< pcl::PointXYZ > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::IndicesPtr **)&jarg2 : &tempnull2; 
  (arg1)->setIndices((pcl::IndicesPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PCLBase_1PointXYZ_1setIndices_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::PCLBase< pcl::PointXYZ > *arg1 = (pcl::PCLBase< pcl::PointXYZ > *) 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointIndicesConstPtr *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PCLBase< pcl::PointXYZ > **)&jarg1; 
  arg2 = *(pcl::PCLBase< pcl::PointXYZ >::PointIndicesConstPtr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PCLBase< pcl::PointXYZ >::PointIndicesConstPtr const & reference is null");
    return ;
  } 
  (arg1)->setIndices((pcl::PCLBase< pcl::PointXYZ >::PointIndicesConstPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PCLBase_1PointXYZ_1setIndices_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  pcl::PCLBase< pcl::PointXYZ > *arg1 = (pcl::PCLBase< pcl::PointXYZ > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PCLBase< pcl::PointXYZ > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  (arg1)->setIndices(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PCLBase_1PointXYZ_1getIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::PCLBase< pcl::PointXYZ > *arg1 = (pcl::PCLBase< pcl::PointXYZ > *) 0 ;
  pcl::IndicesPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PCLBase< pcl::PointXYZ > **)&jarg1; 
  result = (arg1)->getIndices();
  *(pcl::IndicesPtr **)&jresult = result ? new pcl::IndicesPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1PCLBase_1PointXYZ_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pcl::PCLBase< pcl::PointXYZ > *arg1 = (pcl::PCLBase< pcl::PointXYZ > *) 0 ;
  size_t arg2 ;
  pcl::PointXYZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::PCLBase< pcl::PointXYZ > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (pcl::PointXYZ *) &(arg1)->operator [](arg2);
  *(pcl::PointXYZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1vector_1int_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  
  *(boost::shared_ptr<  std::vector<int> > **)&jresult = result ? new boost::shared_ptr<  std::vector<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1vector_1int_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  
  *(boost::shared_ptr<  std::vector<int> > **)&jresult = result ? new boost::shared_ptr<  std::vector<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_vector_1int_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  boost::shared_ptr< std::vector< int > const > *smartarg1 = 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const std::vector<int> > **)&jarg1;
  arg1 = (std::vector<int> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< int >::size_type)((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_vector_1int_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  boost::shared_ptr< std::vector< int > const > *smartarg1 = 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const std::vector<int> > **)&jarg1;
  arg1 = (std::vector<int> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< int >::size_type)((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_vector_1int_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  boost::shared_ptr< std::vector< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  std::vector<int> > **)&jarg1;
  arg1 = (std::vector<int> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_wrapper_pcl_1moduleJNI_vector_1int_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  boost::shared_ptr< std::vector< int > const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const std::vector<int> > **)&jarg1;
  arg1 = (std::vector<int> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_vector_1int_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  boost::shared_ptr< std::vector< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  std::vector<int> > **)&jarg1;
  arg1 = (std::vector<int> *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_vector_1int_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  boost::shared_ptr< std::vector< int > > *smartarg1 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  std::vector<int> > **)&jarg1;
  arg1 = (std::vector<int> *)(smartarg1 ? smartarg1->get() : 0); 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_vector_1int_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  boost::shared_ptr< std::vector< int > > *smartarg1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  std::vector<int> > **)&jarg1;
  arg1 = (std::vector<int> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_vector_1int_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  boost::shared_ptr< std::vector< int > > *smartarg1 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  std::vector<int> > **)&jarg1;
  arg1 = (std::vector<int> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1vector_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  boost::shared_ptr< std::vector< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  std::vector<int> > **)&jarg1;
  arg1 = (std::vector<int> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1indices_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::IndicesPtr *arg2 = 0 ;
  pcl::IndicesPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::IndicesPtr **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->indices_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1indices_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::IndicesPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (pcl::IndicesPtr *) & ((arg1)->indices_);
  *(pcl::IndicesPtr **)&jresult = *result ? new pcl::IndicesPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1input_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr *arg2 = 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->input_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1input_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr *) & ((arg1)->input_);
  *(pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr **)&jresult = *result ? new pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1pcl_1Feature_1PointXYZ_1Normal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1setSearchSurface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr *arg2 = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr **)&jarg2 : &tempnull2; 
  (arg1)->setSearchSurface((pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1getSearchSurface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = ((pcl::Feature< pcl::PointXYZ,pcl::Normal > const *)arg1)->getSearchSurface();
  *(pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr **)&jresult = result ? new pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1setSearchMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::KdTreePtr *arg2 = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::KdTreePtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::Feature< pcl::PointXYZ,pcl::Normal >::KdTreePtr **)&jarg2 : &tempnull2; 
  (arg1)->setSearchMethod((pcl::Feature< pcl::PointXYZ,pcl::Normal >::KdTreePtr const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1getSearchMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::KdTreePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = ((pcl::Feature< pcl::PointXYZ,pcl::Normal > const *)arg1)->getSearchMethod();
  *(pcl::Feature< pcl::PointXYZ,pcl::Normal >::KdTreePtr **)&jresult = result ? new pcl::Feature< pcl::PointXYZ,pcl::Normal >::KdTreePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1getSearchParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (double)((pcl::Feature< pcl::PointXYZ,pcl::Normal > const *)arg1)->getSearchParameter();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1setKSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setKSearch(arg2);
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1getKSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (int)((pcl::Feature< pcl::PointXYZ,pcl::Normal > const *)arg1)->getKSearch();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1setRadiusSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRadiusSearch(arg2);
}


SWIGEXPORT jdouble JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1getRadiusSearch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (double)((pcl::Feature< pcl::PointXYZ,pcl::Normal > const *)arg1)->getRadiusSearch();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1compute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pcl::Feature< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::Feature< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudOut *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  
  arg2 = (pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudOut *)((*(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg2) ? (*(boost::shared_ptr<  pcl::PointCloud<pcl::Normal> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudOut & reference is null");
    return ;
  } 
  (arg1)->compute(*arg2);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1feature_1name_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->feature_name_ = *arg2;
}


SWIGEXPORT jstring JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1feature_1name_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (std::string *) & ((arg1)->feature_name_);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1getClassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (std::string *) &((pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > const *)arg1)->getClassName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1indices_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::IndicesPtr *arg2 = 0 ;
  pcl::IndicesPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::IndicesPtr **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->indices_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1indices_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::IndicesPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (pcl::IndicesPtr *) & ((arg1)->indices_);
  *(pcl::IndicesPtr **)&jresult = *result ? new pcl::IndicesPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1input_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr *arg2 = 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->input_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1input_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr *) & ((arg1)->input_);
  *(pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr **)&jresult = *result ? new pcl::PCLBase< pcl::PointXYZ >::PointCloudConstPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1surface_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr *arg2 = 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->surface_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1surface_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr *) & ((arg1)->surface_);
  *(pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr **)&jresult = *result ? new pcl::Feature< pcl::PointXYZ,pcl::Normal >::PointCloudInConstPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1k_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->k_ = arg2;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1k_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (int) ((arg1)->k_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1search_1radius_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->search_radius_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1search_1radius_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (double) ((arg1)->search_radius_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1search_1parameter_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->search_parameter_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1search_1parameter_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  result = (double) ((arg1)->search_parameter_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_new_1pcl_1NormalEstimation_1PointXYZ_1Normal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *)new pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal >();
  *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1pcl_1NormalEstimation_1PointXYZ_1Normal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1computePointNormal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  Eigen::Vector4f *arg4 = 0 ;
  float *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  
  arg2 = (pcl::PointCloud< pcl::PointXYZ > *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::PointXYZ > const & reference is null");
    return ;
  } 
  
  arg3 = (std::vector< int > *)((*(boost::shared_ptr< const std::vector<int> > **)&jarg3) ? (*(boost::shared_ptr< const std::vector<int> > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg4 = *(Eigen::Vector4f **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Eigen::Vector4f & reference is null");
    return ;
  } 
  arg5 = *(float **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  (arg1)->computePointNormal((pcl::PointCloud< pcl::PointXYZ > const &)*arg2,(std::vector< int > const &)*arg3,*arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1computePointNormal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::PointCloud< pcl::PointXYZ > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  
  arg2 = (pcl::PointCloud< pcl::PointXYZ > *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointCloud< pcl::PointXYZ > const & reference is null");
    return ;
  } 
  
  arg3 = (std::vector< int > *)((*(boost::shared_ptr< const std::vector<int> > **)&jarg3) ? (*(boost::shared_ptr< const std::vector<int> > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg4 = *(float **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  arg5 = *(float **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  arg6 = *(float **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  arg7 = *(float **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  (arg1)->computePointNormal((pcl::PointCloud< pcl::PointXYZ > const &)*arg2,(std::vector< int > const &)*arg3,*arg4,*arg5,*arg6,*arg7);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1setInputCloud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal >::PointCloudConstPtr *arg2 = 0 ;
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal >::PointCloudConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = jarg2 ? *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal >::PointCloudConstPtr **)&jarg2 : &tempnull2; 
  (arg1)->setInputCloud((pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal >::PointCloudConstPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1setViewPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setViewPoint(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1getViewPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  arg2 = *(float **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  arg3 = *(float **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  arg4 = *(float **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  (arg1)->getViewPoint(*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1useSensorOriginAsViewPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *arg1 = (pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1; 
  (arg1)->useSensorOriginAsViewPoint();
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1pcl_1search_1Search_1PointXYZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((pcl::search::Search< pcl::PointXYZ > const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1setSortedResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  bool arg2 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSortedResults(arg2);
}


SWIGEXPORT jboolean JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1getSortedResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->getSortedResults();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1setInputCloud_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr *arg2 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr *arg3 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr tempnull2 ;
  pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr **)&jarg2 : &tempnull2; 
  arg3 = jarg3 ? *(pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr **)&jarg3 : &tempnull3; 
  (arg1)->setInputCloud((pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr const &)*arg2,(pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1setInputCloud_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr *arg2 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr **)&jarg2 : &tempnull2; 
  (arg1)->setInputCloud((pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1getInputCloud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((pcl::search::Search< pcl::PointXYZ > const *)arg1)->getInputCloud();
  *(pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr **)&jresult = result ? new pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1getIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((pcl::search::Search< pcl::PointXYZ > const *)arg1)->getIndices();
  *(pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr **)&jresult = result ? new pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1nearestKSearch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::PointXYZ *arg2 = 0 ;
  int arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(pcl::PointXYZ **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::Search< pcl::PointXYZ > const *)arg1)->nearestKSearch((pcl::PointXYZ const &)*arg2,arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1nearestKSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jint jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< float > *arg6 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  
  arg5 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg5) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg5)->get() : 0);
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg6 = *(std::vector< float > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::Search< pcl::PointXYZ > const *)arg1)->nearestKSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,arg3,arg4,*arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1nearestKSearch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::Search< pcl::PointXYZ > const *)arg1)->nearestKSearch(arg2,arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1nearestKSearch_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jlong jarg6) {
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int arg4 ;
  std::vector< std::vector< int > > *arg5 = 0 ;
  std::vector< std::vector< float > > *arg6 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return ;
  } 
  
  arg3 = (std::vector< int > *)((*(boost::shared_ptr< const std::vector<int> > **)&jarg3) ? (*(boost::shared_ptr< const std::vector<int> > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg4 = (int)jarg4; 
  arg5 = *(std::vector< std::vector< int > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return ;
  } 
  arg6 = *(std::vector< std::vector< float > > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< float > > & reference is null");
    return ;
  } 
  ((pcl::search::Search< pcl::PointXYZ > const *)arg1)->nearestKSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,(std::vector< int > const &)*arg3,arg4,*arg5,*arg6);
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1radiusSearch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::PointXYZ *arg2 = 0 ;
  double arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  unsigned int arg6 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(pcl::PointXYZ **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  arg6 = (unsigned int)jarg6; 
  result = (int)((pcl::search::Search< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::PointXYZ const &)*arg2,arg3,*arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1radiusSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::PointXYZ *arg2 = 0 ;
  double arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(pcl::PointXYZ **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::Search< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::PointXYZ const &)*arg2,arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1radiusSearch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< float > *arg6 = 0 ;
  unsigned int arg7 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  
  arg5 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg5) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg5)->get() : 0);
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg6 = *(std::vector< float > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  arg7 = (unsigned int)jarg7; 
  result = (int)((pcl::search::Search< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,arg3,arg4,*arg5,*arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1radiusSearch_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jint jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< float > *arg6 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  
  arg5 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg5) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg5)->get() : 0);
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg6 = *(std::vector< float > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::Search< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,arg3,arg4,*arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1radiusSearch_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  int arg2 ;
  double arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  unsigned int arg6 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  arg6 = (unsigned int)jarg6; 
  result = (int)((pcl::search::Search< pcl::PointXYZ > const *)arg1)->radiusSearch(arg2,arg3,*arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1radiusSearch_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  int arg2 ;
  double arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::Search< pcl::PointXYZ > const *)arg1)->radiusSearch(arg2,arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1radiusSearch_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  double arg4 ;
  std::vector< std::vector< int > > *arg5 = 0 ;
  std::vector< std::vector< float > > *arg6 = 0 ;
  unsigned int arg7 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return ;
  } 
  
  arg3 = (std::vector< int > *)((*(boost::shared_ptr< const std::vector<int> > **)&jarg3) ? (*(boost::shared_ptr< const std::vector<int> > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(std::vector< std::vector< int > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return ;
  } 
  arg6 = *(std::vector< std::vector< float > > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< float > > & reference is null");
    return ;
  } 
  arg7 = (unsigned int)jarg7; 
  ((pcl::search::Search< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,(std::vector< int > const &)*arg3,arg4,*arg5,*arg6,arg7);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1Search_1PointXYZ_1radiusSearch_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5, jlong jarg6) {
  pcl::search::Search< pcl::PointXYZ > *arg1 = (pcl::search::Search< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  double arg4 ;
  std::vector< std::vector< int > > *arg5 = 0 ;
  std::vector< std::vector< float > > *arg6 = 0 ;
  boost::shared_ptr< pcl::search::Search< pcl::PointXYZ > const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::Search<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::Search<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return ;
  } 
  
  arg3 = (std::vector< int > *)((*(boost::shared_ptr< const std::vector<int> > **)&jarg3) ? (*(boost::shared_ptr< const std::vector<int> > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(std::vector< std::vector< int > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return ;
  } 
  arg6 = *(std::vector< std::vector< float > > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< float > > & reference is null");
    return ;
  } 
  ((pcl::search::Search< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,(std::vector< int > const &)*arg3,arg4,*arg5,*arg6);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1indices_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr *arg2 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->indices_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1indices_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr *) & ((arg1)->indices_);
  *(pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr **)&jresult = *result ? new pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1input_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr *arg2 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->input_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1input_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr *) & ((arg1)->input_);
  *(pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr **)&jresult = *result ? new pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1getIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->getIndices();
  *(pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr **)&jresult = result ? new pcl::search::Search< pcl::PointXYZ >::IndicesConstPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1getInputCloud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->getInputCloud();
  *(pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr **)&jresult = result ? new pcl::search::Search< pcl::PointXYZ >::PointCloudConstPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1nearestKSearch_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jint jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< float > *arg6 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  
  arg5 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg5) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg5)->get() : 0);
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg6 = *(std::vector< float > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->nearestKSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,arg3,arg4,*arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1nearestKSearch_1_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->nearestKSearch(arg2,arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1nearestKSearch_1_1SWIG_10_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jlong jarg6) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int arg4 ;
  std::vector< std::vector< int > > *arg5 = 0 ;
  std::vector< std::vector< float > > *arg6 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return ;
  } 
  
  arg3 = (std::vector< int > *)((*(boost::shared_ptr< const std::vector<int> > **)&jarg3) ? (*(boost::shared_ptr< const std::vector<int> > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg4 = (int)jarg4; 
  arg5 = *(std::vector< std::vector< int > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return ;
  } 
  arg6 = *(std::vector< std::vector< float > > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< float > > & reference is null");
    return ;
  } 
  ((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->nearestKSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,(std::vector< int > const &)*arg3,arg4,*arg5,*arg6);
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1radiusSearch_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< float > *arg6 = 0 ;
  unsigned int arg7 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  
  arg5 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg5) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg5)->get() : 0);
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg6 = *(std::vector< float > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  arg7 = (unsigned int)jarg7; 
  result = (int)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,arg3,arg4,*arg5,*arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1radiusSearch_1_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jint jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< float > *arg6 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  
  arg5 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg5) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg5)->get() : 0);
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg6 = *(std::vector< float > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,arg3,arg4,*arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1radiusSearch_1_1SWIG_10_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  int arg2 ;
  double arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  unsigned int arg6 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  arg6 = (unsigned int)jarg6; 
  result = (int)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->radiusSearch(arg2,arg3,*arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1radiusSearch_1_1SWIG_10_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  int arg2 ;
  double arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->radiusSearch(arg2,arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1radiusSearch_1_1SWIG_10_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  double arg4 ;
  std::vector< std::vector< int > > *arg5 = 0 ;
  std::vector< std::vector< float > > *arg6 = 0 ;
  unsigned int arg7 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return ;
  } 
  
  arg3 = (std::vector< int > *)((*(boost::shared_ptr< const std::vector<int> > **)&jarg3) ? (*(boost::shared_ptr< const std::vector<int> > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(std::vector< std::vector< int > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return ;
  } 
  arg6 = *(std::vector< std::vector< float > > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< float > > & reference is null");
    return ;
  } 
  arg7 = (unsigned int)jarg7; 
  ((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,(std::vector< int > const &)*arg3,arg4,*arg5,*arg6,arg7);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1radiusSearch_1_1SWIG_10_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5, jlong jarg6) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::Search< pcl::PointXYZ >::PointCloud *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  double arg4 ;
  std::vector< std::vector< int > > *arg5 = 0 ;
  std::vector< std::vector< float > > *arg6 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (pcl::search::Search< pcl::PointXYZ >::PointCloud *)((*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2) ? (*(boost::shared_ptr< const pcl::PointCloud<pcl::PointXYZ> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::Search< pcl::PointXYZ >::PointCloud const & reference is null");
    return ;
  } 
  
  arg3 = (std::vector< int > *)((*(boost::shared_ptr< const std::vector<int> > **)&jarg3) ? (*(boost::shared_ptr< const std::vector<int> > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(std::vector< std::vector< int > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< int > > & reference is null");
    return ;
  } 
  arg6 = *(std::vector< std::vector< float > > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< float > > & reference is null");
    return ;
  } 
  ((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::search::Search< pcl::PointXYZ >::PointCloud const &)*arg2,(std::vector< int > const &)*arg3,arg4,*arg5,*arg6);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1sorted_1results_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  bool arg2 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->sorted_results_ = arg2;
}


SWIGEXPORT jboolean JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1sorted_1results_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool) ((arg1)->sorted_results_);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_delete_1pcl_1search_1KdTree_1PointXYZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1setPointRepresentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::KdTree< pcl::PointXYZ >::PointRepresentationConstPtr *arg2 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(pcl::search::KdTree< pcl::PointXYZ >::PointRepresentationConstPtr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::search::KdTree< pcl::PointXYZ >::PointRepresentationConstPtr const & reference is null");
    return ;
  } 
  (arg1)->setPointRepresentation((pcl::search::KdTree< pcl::PointXYZ >::PointRepresentationConstPtr const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1getPointRepresentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  SwigValueWrapper< boost::shared_ptr< pcl::PointRepresentation< pcl::PointXYZ > const > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->getPointRepresentation();
  *(pcl::search::KdTree< pcl::PointXYZ >::PointRepresentationConstPtr **)&jresult = new pcl::search::KdTree< pcl::PointXYZ >::PointRepresentationConstPtr((const pcl::search::KdTree< pcl::PointXYZ >::PointRepresentationConstPtr &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1setSortedResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  bool arg2 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSortedResults(arg2);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1setEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  float arg2 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (float)jarg2; 
  (arg1)->setEpsilon(arg2);
}


SWIGEXPORT jfloat JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1getEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (float)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->getEpsilon();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1setInputCloud_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::KdTree< pcl::PointXYZ >::PointCloudConstPtr *arg2 = 0 ;
  pcl::search::KdTree< pcl::PointXYZ >::IndicesConstPtr *arg3 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::search::KdTree< pcl::PointXYZ >::PointCloudConstPtr tempnull2 ;
  pcl::search::KdTree< pcl::PointXYZ >::IndicesConstPtr tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(pcl::search::KdTree< pcl::PointXYZ >::PointCloudConstPtr **)&jarg2 : &tempnull2; 
  arg3 = jarg3 ? *(pcl::search::KdTree< pcl::PointXYZ >::IndicesConstPtr **)&jarg3 : &tempnull3; 
  (arg1)->setInputCloud((pcl::search::KdTree< pcl::PointXYZ >::PointCloudConstPtr const &)*arg2,(pcl::search::KdTree< pcl::PointXYZ >::IndicesConstPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1setInputCloud_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::search::KdTree< pcl::PointXYZ >::PointCloudConstPtr *arg2 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *smartarg1 = 0 ;
  pcl::search::KdTree< pcl::PointXYZ >::PointCloudConstPtr tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(pcl::search::KdTree< pcl::PointXYZ >::PointCloudConstPtr **)&jarg2 : &tempnull2; 
  (arg1)->setInputCloud((pcl::search::KdTree< pcl::PointXYZ >::PointCloudConstPtr const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1nearestKSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::PointXYZ *arg2 = 0 ;
  int arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(pcl::PointXYZ **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->nearestKSearch((pcl::PointXYZ const &)*arg2,arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1radiusSearch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::PointXYZ *arg2 = 0 ;
  double arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  unsigned int arg6 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(pcl::PointXYZ **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  arg6 = (unsigned int)jarg6; 
  result = (int)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::PointXYZ const &)*arg2,arg3,*arg4,*arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1radiusSearch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  pcl::search::KdTree< pcl::PointXYZ > *arg1 = (pcl::search::KdTree< pcl::PointXYZ > *) 0 ;
  pcl::PointXYZ *arg2 = 0 ;
  double arg3 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr< const pcl::search::KdTree<pcl::PointXYZ> > **)&jarg1;
  arg1 = (pcl::search::KdTree<pcl::PointXYZ> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(pcl::PointXYZ **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pcl::PointXYZ const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  
  arg4 = (std::vector< int > *)((*(boost::shared_ptr<  std::vector<int> > **)&jarg4) ? (*(boost::shared_ptr<  std::vector<int> > **)&jarg4)->get() : 0);
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< float > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (int)((pcl::search::KdTree< pcl::PointXYZ > const *)arg1)->radiusSearch((pcl::PointXYZ const &)*arg2,arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1Feature_1PointXYZ_1Normal_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pcl::PCLBase< pcl::PointXYZ > **)&baseptr = *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1NormalEstimation_1PointXYZ_1Normal_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pcl::Feature< pcl::PointXYZ,pcl::Normal > **)&baseptr = *(pcl::NormalEstimation< pcl::PointXYZ,pcl::Normal > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_wrapper_pcl_1moduleJNI_pcl_1search_1KdTree_1PointXYZ_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > **)&jarg1;
    *(boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > > **)&baseptr = argp1 ? new boost::shared_ptr< pcl::search::KdTree< pcl::PointXYZ > >(*argp1) : 0;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

